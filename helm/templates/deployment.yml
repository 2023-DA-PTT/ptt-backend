apiVersion: apps/v1
kind: Deployment
metadata:
  name: ptt-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ptt-backend
  template:
    metadata:
      labels:
        app: ptt-backend
    spec:
      serviceAccountName: ptt-backend
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: QUARKUS_OIDC_AUTH-SERVER-URL
              value: {{ .Values.oidc.url }}
            - name: QUARKUS_OIDC_CLIENT-ID
              value: {{ .Values.oidc.client.id }}
            - name: QUARKUS_OIDC_CREDENTIALS_SECRET
              value: {{ .Values.oidc.client.secret }}
          resources:
            requests:
              memory: "1024Mi"
              cpu: "200m"
            limits:
              memory: "2048Mi"
              cpu: "500m"
      imagePullSecrets:
        - name: dockerconfigjson-github-com
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ptt-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ptt-postgres
  template:
    metadata:
      labels:
        app: ptt-postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: ptt-postgres-secret
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
{{ if .Values.volumes }}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: ptt-postgresdata
{{ end }}
      imagePullSecrets:
        - name: dockerconfigjson-github-com
{{ if .Values.volumes }}
      volumes:
        - name: ptt-postgresdata
          persistentVolumeClaim:
            claimName: ptt-postgres-volume-claim
{{ end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ptt-mosquitto
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ptt-mosquitto
  template:
    metadata:
      labels:
        app: ptt-mosquitto
    spec:
      containers:
        - name: mqtt
          image: eclipse-mosquitto:latest
          imagePullPolicy: Always
          ports:
            - name: mqtt1
              containerPort: 1883
            - name: mqtt2
              containerPort: 9001
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          volumeMounts:
            - name: mosquitto-config
              mountPath: /mosquitto/config
      imagePullSecrets:
        - name: dockerconfigjson-github-com
      volumes:
        - name: mosquitto-config
          configMap:
            name: mosquitto-config
            items:
              - key: mosquitto.conf
                path: mosquitto.conf
{{ if .Values.keycloak.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ptt-keycloak
  labels:
    app: ptt-keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ptt-keycloak
  template:
    metadata:
      labels:
        app: ptt-keycloak
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:19.0.3
        args: ["start", "--db-url-host", "{{ .Values.postgres.host }}", "--db-username", "{{ .Values.postgres.username }}", "--db-password", "{{ .Values.postgres.password }}", "--hostname-url", "{{.Values.keycloak.hostname}}"]
        env:
        - name: KEYCLOAK_ADMIN
          value: {{ .Values.keycloak.username }}
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: {{ .Values.keycloak.password }}
        - name: KC_PROXY
          value: "edge"
        ports:
        - name: http
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /realms/master
            port: 8080
{{ end}}